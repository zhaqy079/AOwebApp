@model SelectList
@{
    ViewBag.Title = "Annual Sales";
}

<div class="container">

    @*Page Title*@
    <div class="row">
        <h2 class="text-center bg-light text-dark">Annual Sales Report</h2>
    </div>

    <div class="row mb-3">
        <div class="col-2">
            <select class="form-control" name="year" asp-items="@Model">
                <option value="">Select Years...</option>
            </select>
        </div>
    </div>
    @*Prac 10 D3 Prac*@
    <div>
        <svg class="border border-primary rounded p-2" width="100%" height="400px" >

        </svg>
    </div>
    @*Create an MVC scripts section link to the D3.js library*@

    @section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
        // Creating a svg JS var to allow other elements to be appended
        // Same way as document.querySelector((xx));
        const svg = d3.select('svg');
        // Create height and weight determine the size of the element in the web broswer
        let h = svg.node().getBoundingClientRect().height;
        let w = svg.node().getBoundingClientRect().width;
        //console.log('Width ' + w); // 672px
        //console.log('Height ' + h); // 400px

        // Chart Margins
        const chartMargins = {
            left: 40,
            right: 25,
            top: 25,
            bottom: 80
        };

        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // Create a JS listener for the selection Year dropdown list changes
        // then to trigger a fetch() request for the AnnualSalesReportData() action
        document.querySelector('.row .col-2 [name="year"]')
            .addEventListener('change', (event) => {
                let year = event.target.value; // capture the value of the year selected
                console.log("Year: " + year);
                if (year.length > 0) {
                    // If its not a empty pass the year into a few fetch request for the action
                    fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                        .then(response => {
                            console.log("response status: " + response.status); // State Code provide info about response outcome
                            console.log("response text: " + response.statusText);
                            return response.json();
                        })
                        .then(data => buildGraph(data))
                        .catch (err => console.log(err.message));

                }
            });
        // Call the buildGraph() function
        function buildGraph(dataSet) {
            console.log(dataSet);
            // Build the graph
            // Calculate the max value to be displayed
            let totalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = totalItemsRange[1];

            console.log("Max totalItems: " + maxTotalItems)
            // Create two JS var called barMargin and barWidth
            // to decide the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // Create a YScale and XScale
            let yScale = d3.scaleLinear()
                .domain([0, maxTotalItems])
                .range([h, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.monthName);
            console.log("Month array: " + monthArray)

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w])
                .paddingInner(0.1)
            // test xScale
            console.log("xScale: " + xScale("March"))

            // Chart Margin part
            // create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // Create a JS var called barGroups, assign all the 'g' elements in the svg to it
            // Load the dataSet created data visualization
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            
            // Create a JS var called newBarGroups use enter() function
            //  enter() function allows D3 to select all the data values from the dataSet arrayand append() function
            let newBarGroups = barGroups.enter()
                .append('g')
                // Set the (x,y) attr for the position of the group elements
                // x =  current index * barWidth; y =  height – (current data value/max)*height
                .attr('transform', (d, i) => {
                    // return `translate(${i * barWidth},${h - (d.totalItems / maxTotalItems) * h})`;
                    return `translate(${xScale(d.monthName)},${yScale(d.totalItems)})`;
                });
            // Append a new rectangle
            // Update Animate
            newBarGroups
                .append('rect')
                .attr('x', 0)
                //.attr('height', (d, i) => { return d.totalItems / maxTotalItems * h; })
                .attr('height', 0)
                .attr('y', (d, i) => { return h - yScale(d.totalItems); })
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .transition().duration((d, i) => i * 500)
                .delay((d, i) => i + 200) // transition each col one by one
                .attr('y', 0)
                .attr('height', (d, i) => { return h - yScale(d.totalItems); })
                .style("fill", (d, i) => { return `rgb(70,65, ${i* 15 + 80})`})

            // Create a Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, i) => { return xScale.bandwidth() / 2; })
                .attr('y', 20)
                .attr('fill', 'white')
                .style('font-size', '0.7em')
                .text((d, i) => d.totalItems.toLocaleString());

            // Create the axis and add it to the svg
            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
                .attr('transform',`translate(0,${h})`)
                .classed('axis x', true)
                .call(xAxis);

            // Rotate the x Axis label
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.8em")
                .attr("dy", "0.25em")
                .style("text-anchor", "end")
                .style("font-size", "0.9em");

        }
    </script>
    }
</div>